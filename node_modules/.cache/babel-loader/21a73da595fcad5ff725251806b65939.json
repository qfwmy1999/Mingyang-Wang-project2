{"ast":null,"code":"// 0-可选 1-不在单词中 2-在单词中但不在正确的位置 3-在单词中且在正确的位置\nexport const getStatus = (guess, solution) => {\n  const status = {};\n  guess.filter(Boolean).forEach((key, i) => {\n    if (status[key] !== 3) {\n      const index = solution.findIndex(v => v === key);\n\n      if (index === i) {\n        status[key] = 3;\n      } else if (index > -1) {\n        status[key] = 2;\n      } else {\n        status[key] = 1;\n      }\n    }\n  });\n  return status;\n};\nexport const getStatusByPlace = (guess, solution) => {\n  const status = [];\n\n  for (let i = 0; i < solution.length; i++) {\n    if (guess[i] === solution[i]) {\n      status[i] = 3;\n      guess[i] = solution[i] = '';\n    }\n  }\n\n  const count = {};\n  guess.forEach((key, i) => {\n    if (!count[key]) count[key] = 0;\n\n    if (!key) {\n      status[i] = status[i] || 0;\n    } else {\n      if (count[key] < solution.filter(v => v === key).length) {\n        const index = solution.findIndex(v => v === key);\n\n        if (index === i) {\n          status[i] = 3;\n        } else if (index > -1) {\n          status[i] = 2;\n        } else {\n          status[i] = 1;\n        }\n\n        count[key]++;\n      } else {\n        status[i] = 1;\n      }\n    }\n  });\n  return status;\n};","map":{"version":3,"sources":["/Users/wangmingyang/Desktop/CS 5610 Web Development/wordle/src/utils/index.js"],"names":["getStatus","guess","solution","status","filter","Boolean","forEach","key","i","index","findIndex","v","getStatusByPlace","length","count"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,QAAMC,MAAM,GAAG,EAAf;AACAF,EAAAA,KAAK,CAACG,MAAN,CAAaC,OAAb,EAAsBC,OAAtB,CAA8B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtC,QAAIL,MAAM,CAACI,GAAD,CAAN,KAAgB,CAApB,EAAuB;AACnB,YAAME,KAAK,GAAGP,QAAQ,CAACQ,SAAT,CAAmBC,CAAC,IAAIA,CAAC,KAAKJ,GAA9B,CAAd;;AACA,UAAIE,KAAK,KAAKD,CAAd,EAAiB;AACbL,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,CAAd;AACH,OAFD,MAEO,IAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AACnBN,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,CAAd;AACH,OAFM,MAEA;AACHJ,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,CAAd;AACH;AACJ;AACJ,GAXD;AAYA,SAAOJ,MAAP;AACH,CAfM;AAiBP,OAAO,MAAMS,gBAAgB,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;AACjD,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACW,MAA7B,EAAqCL,CAAC,EAAtC,EAA0C;AACtC,QAAIP,KAAK,CAACO,CAAD,CAAL,KAAaN,QAAQ,CAACM,CAAD,CAAzB,EAA8B;AAC1BL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACAP,MAAAA,KAAK,CAACO,CAAD,CAAL,GAAWN,QAAQ,CAACM,CAAD,CAAR,GAAc,EAAzB;AACH;AACJ;;AACD,QAAMM,KAAK,GAAG,EAAd;AACAb,EAAAA,KAAK,CAACK,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtB,QAAI,CAACM,KAAK,CAACP,GAAD,CAAV,EAAiBO,KAAK,CAACP,GAAD,CAAL,GAAa,CAAb;;AACjB,QAAI,CAACA,GAAL,EAAU;AACNJ,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAN,IAAa,CAAzB;AACH,KAFD,MAEO;AACH,UAAIM,KAAK,CAACP,GAAD,CAAL,GAAaL,QAAQ,CAACE,MAAT,CAAgBO,CAAC,IAAIA,CAAC,KAAKJ,GAA3B,EAAgCM,MAAjD,EAAyD;AACrD,cAAMJ,KAAK,GAAGP,QAAQ,CAACQ,SAAT,CAAmBC,CAAC,IAAIA,CAAC,KAAKJ,GAA9B,CAAd;;AACA,YAAIE,KAAK,KAAKD,CAAd,EAAiB;AACbL,UAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACH,SAFD,MAEO,IAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACnBN,UAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACH,SAFM,MAEA;AACHL,UAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACH;;AACDM,QAAAA,KAAK,CAACP,GAAD,CAAL;AACH,OAVD,MAUO;AACHJ,QAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACH;AACJ;AACJ,GAnBD;AAoBA,SAAOL,MAAP;AACH,CA9BM","sourcesContent":["// 0-可选 1-不在单词中 2-在单词中但不在正确的位置 3-在单词中且在正确的位置\r\nexport const getStatus = (guess, solution) => {\r\n    const status = {}\r\n    guess.filter(Boolean).forEach((key, i) => {\r\n        if (status[key] !== 3) {\r\n            const index = solution.findIndex(v => v === key)\r\n            if (index === i) {\r\n                status[key] = 3\r\n            } else if (index > -1) {\r\n                status[key] = 2\r\n            } else {\r\n                status[key] = 1\r\n            }\r\n        }\r\n    })\r\n    return status\r\n}\r\n\r\nexport const getStatusByPlace = (guess, solution) => {\r\n    const status = []\r\n    for (let i = 0; i < solution.length; i++) {\r\n        if (guess[i] === solution[i]) {\r\n            status[i] = 3\r\n            guess[i] = solution[i] = ''\r\n        }\r\n    }\r\n    const count = {}\r\n    guess.forEach((key, i) => {\r\n        if (!count[key]) count[key] = 0\r\n        if (!key) {\r\n            status[i] = status[i] || 0\r\n        } else {\r\n            if (count[key] < solution.filter(v => v === key).length) {\r\n                const index = solution.findIndex(v => v === key)\r\n                if (index === i) {\r\n                    status[i] = 3\r\n                } else if (index > -1) {\r\n                    status[i] = 2\r\n                } else {\r\n                    status[i] = 1\r\n                }\r\n                count[key]++\r\n            } else {\r\n                status[i] = 1\r\n            }\r\n        }\r\n    })\r\n    return status\r\n}"]},"metadata":{},"sourceType":"module"}