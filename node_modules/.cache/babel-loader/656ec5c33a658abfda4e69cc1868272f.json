{"ast":null,"code":"var _jsxFileName = \"/Users/wangmingyang/Desktop/CS 5610 Web Development/wordle/src/context/Wordle.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useSearchParams } from 'react-router-dom';\nimport { getStatus } from '../utils';\nimport WORDS from '../words.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordleContext = /*#__PURE__*/createContext({\n  solution: ''\n});\nexport const useWordle = () => {\n  _s();\n\n  return useContext(WordleContext);\n};\n\n_s(useWordle, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const WordleProvider = props => {\n  _s2();\n\n  const [searchParams] = useSearchParams();\n  const level = Math.min(Math.max(+searchParams.get('level') || 0, 0), 2);\n  const length = 5 + level;\n  const total = 7 - level;\n  const [solution, setSolution] = useState('');\n  const [count, setCount] = useState(0);\n  const [guesses, setGuesses] = useState(Array(total).fill('').map(() => []));\n\n  const initStatus = () => {\n    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').reduce((acc, cur) => {\n      acc[cur] = 0;\n      return acc;\n    }, {});\n  };\n\n  const [status, setStatus] = useState(initStatus);\n  const [playStatus, setPlayStatus] = useState(0);\n  const [alert, setAlert] = useState({\n    type: '',\n    content: ''\n  });\n\n  const onSubmit = () => {\n    if (playStatus) return;\n    setAlert({\n      type: '',\n      content: ''\n    });\n\n    if (count < total && guesses[count].length === length) {\n      const newStatus = getStatus(guesses[count], solution.split(''));\n      setStatus({ ...status,\n        ...newStatus\n      });\n\n      if (guesses[count].join('') === solution) {\n        setPlayStatus(1);\n        setAlert({\n          type: 'success',\n          content: 'Congratulations！Do you want to play again？'\n        });\n      } else if (count === total - 1) {\n        setPlayStatus(2);\n        setAlert({\n          type: 'danger',\n          content: `Failed！The correct answer is ${solution}`\n        });\n      }\n\n      setCount(count + 1);\n    } else if (guesses[count].length < length) {\n      setAlert({\n        type: 'warning',\n        content: 'Not enough letters'\n      });\n    }\n  };\n\n  const onInput = key => {\n    if (playStatus) return;\n\n    if (key) {\n      if (count < total && guesses[count].length < length) {\n        guesses[count].push(key);\n        setGuesses([...guesses]);\n      }\n    } else {\n      if (count < total && guesses[count].length > 0) {\n        guesses[count].pop();\n        setGuesses([...guesses]);\n      }\n    }\n  };\n\n  const [restart, setRestart] = useState(false);\n  useEffect(() => {\n    setRestart(true);\n  }, [level, total]);\n  useEffect(() => {\n    if (restart) {\n      setSolution(WORDS[level][Math.floor(Math.random() * WORDS[level].length)].toUpperCase());\n      setCount(0);\n      setGuesses(Array(total).fill('').map(() => []));\n      setStatus(initStatus());\n      setPlayStatus(0);\n      setAlert({\n        type: '',\n        content: ''\n      });\n      setRestart(false);\n    }\n  }, [level, total, restart]);\n  return /*#__PURE__*/_jsxDEV(WordleContext.Provider, {\n    value: {\n      solution,\n      guesses,\n      status,\n      count,\n      total,\n      length,\n      alert,\n      onSubmit,\n      onInput,\n      setRestart\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(WordleProvider, \"EZ+206kkAtSQ87wS6rPz4HIpJSc=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = WordleProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordleProvider\");","map":{"version":3,"sources":["/Users/wangmingyang/Desktop/CS 5610 Web Development/wordle/src/context/Wordle.js"],"names":["React","createContext","useContext","useEffect","useState","useSearchParams","getStatus","WORDS","WordleContext","solution","useWordle","WordleProvider","props","searchParams","level","Math","min","max","get","length","total","setSolution","count","setCount","guesses","setGuesses","Array","fill","map","initStatus","split","reduce","acc","cur","status","setStatus","playStatus","setPlayStatus","alert","setAlert","type","content","onSubmit","newStatus","join","onInput","key","push","pop","restart","setRestart","floor","random","toUpperCase"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { getStatus } from '../utils'\r\nimport WORDS from '../words.json';\r\n\r\nexport const WordleContext = createContext({\r\n    solution: ''\r\n});\r\n\r\nexport const useWordle = () => useContext(WordleContext);\r\n\r\nexport const WordleProvider = (props) => {\r\n    const [searchParams] = useSearchParams()\r\n    const level = Math.min(Math.max(+searchParams.get('level') || 0, 0), 2)\r\n    const length = 5 + level\r\n    const total = 7 - level\r\n\r\n    const [solution, setSolution] = useState('')\r\n    const [count, setCount] = useState(0)\r\n    const [guesses, setGuesses] = useState(Array(total).fill('').map(() => []))\r\n    const initStatus = () => {\r\n        return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').reduce((acc, cur) => {\r\n            acc[cur] = 0\r\n            return acc\r\n        }, {})\r\n    }\r\n    const [status, setStatus] = useState(initStatus)\r\n    const [playStatus, setPlayStatus] = useState(0)\r\n    const [alert, setAlert] = useState({ type: '', content: '' })\r\n\r\n    const onSubmit = () => {\r\n        if (playStatus) return\r\n        setAlert({ type: '', content: '' })\r\n        if (count < total && guesses[count].length === length) {\r\n            const newStatus = getStatus(guesses[count], solution.split(''))\r\n            setStatus({ ...status, ...newStatus })\r\n            if (guesses[count].join('') === solution) {\r\n                setPlayStatus(1)\r\n                setAlert({\r\n                    type: 'success',\r\n                    content: 'Congratulations！Do you want to play again？'\r\n                })\r\n            } else if (count === total - 1) {\r\n                setPlayStatus(2)\r\n                setAlert({\r\n                    type: 'danger',\r\n                    content: `Failed！The correct answer is ${solution}`\r\n                })\r\n            }\r\n            setCount(count + 1)\r\n        } else if (guesses[count].length < length) {\r\n            setAlert({\r\n                type: 'warning',\r\n                content: 'Not enough letters'\r\n            })\r\n        }\r\n    }\r\n\r\n    const onInput = (key) => {\r\n        if (playStatus) return\r\n        if (key) {\r\n            if (count < total && guesses[count].length < length) {\r\n                guesses[count].push(key)\r\n                setGuesses([...guesses])\r\n            }\r\n        } else {\r\n            if (count < total && guesses[count].length > 0) {\r\n                guesses[count].pop()\r\n                setGuesses([...guesses])\r\n            }\r\n        }\r\n    }\r\n\r\n    const [restart, setRestart] = useState(false)\r\n    useEffect(() => {\r\n        setRestart(true)\r\n    }, [level, total])\r\n    useEffect(() => {\r\n        if (restart) {\r\n            setSolution(WORDS[level][Math.floor(Math.random() * WORDS[level].length)].toUpperCase())\r\n            setCount(0)\r\n            setGuesses(Array(total).fill('').map(() => []))\r\n            setStatus(initStatus())\r\n            setPlayStatus(0)\r\n            setAlert({ type: '', content: '' })\r\n            setRestart(false)\r\n        }\r\n    }, [level, total, restart])\r\n\r\n    return (\r\n        <WordleContext.Provider value={{ solution, guesses, status, count, total, length, alert, onSubmit, onInput, setRestart }} {...props} />\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}