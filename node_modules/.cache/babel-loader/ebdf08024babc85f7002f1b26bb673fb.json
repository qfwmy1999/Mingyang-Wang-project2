{"ast":null,"code":"var _jsxFileName = \"/Users/wangmingyang/Desktop/CS 5610 Web Development/wordle/src/components/Keyboard.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWordle } from '../context/Wordle';\nimport { Key } from './Key';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Keyboard = () => {\n  _s();\n\n  const {\n    status,\n    onSubmit,\n    onInput\n  } = useWordle();\n  useEffect(() => {\n    const listener = e => {\n      if (e.code === 'Enter') {\n        onSubmit();\n      } else if (e.code === 'Backspace') {\n        onInput();\n      } else {\n        const key = e.key.toUpperCase();\n\n        if (key.length === 1 && key >= 'A' && key <= 'Z') {\n          onInput(key);\n        }\n      }\n    };\n\n    window.addEventListener('keyup', listener);\n    return () => {\n      window.removeEventListener('keyup', listener);\n    };\n  }, [onSubmit, onInput]);\n  const keys = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'DELETE']];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: keys.map((keys, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: keys.map(key => /*#__PURE__*/_jsxDEV(Key, {\n        value: key,\n        status: status[key]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n\n_s(Keyboard, \"TLbdj0/oaB2OWzTLYbnhDW81dlw=\", false, function () {\n  return [useWordle];\n});\n\n_c = Keyboard;\nexport default Keyboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"sources":["/Users/wangmingyang/Desktop/CS 5610 Web Development/wordle/src/components/Keyboard.js"],"names":["useEffect","useWordle","Key","Keyboard","status","onSubmit","onInput","listener","e","code","key","toUpperCase","length","window","addEventListener","removeEventListener","keys","map","i"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,GAAT,QAAoB,OAApB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAgCL,SAAS,EAA/C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AACtBJ,QAAAA,QAAQ;AACT,OAFD,MAEO,IAAIG,CAAC,CAACC,IAAF,KAAW,WAAf,EAA4B;AACjCH,QAAAA,OAAO;AACR,OAFM,MAEA;AACL,cAAMI,GAAG,GAAGF,CAAC,CAACE,GAAF,CAAMC,WAAN,EAAZ;;AACA,YAAID,GAAG,CAACE,MAAJ,KAAe,CAAf,IAAoBF,GAAG,IAAI,GAA3B,IAAkCA,GAAG,IAAI,GAA7C,EAAkD;AAChDJ,UAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF;AACF,KAXD;;AAYAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCP,QAAjC;AACA,WAAO,MAAM;AACXM,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCR,QAApC;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACF,QAAD,EAAWC,OAAX,CAjBM,CAAT;AAmBA,QAAMU,IAAI,GAAG,CACX,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CADW,EAEX,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,CAFW,EAGX,CAAC,OAAD,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,QAA7C,CAHW,CAAb;AAMA,sBACE;AAAA,cACGA,IAAI,CAACC,GAAL,CAAS,CAACD,IAAD,EAAOE,CAAP,kBACR;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,gBACGF,IAAI,CAACC,GAAL,CAAUP,GAAD,iBACR,QAAC,GAAD;AAAe,QAAA,KAAK,EAAEA,GAAtB;AAA2B,QAAA,MAAM,EAAEN,MAAM,CAACM,GAAD;AAAzC,SAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,cADD;AADH,OAAiDQ,CAAjD;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAWD,CAvCD;;GAAMf,Q;UACkCF,S;;;KADlCE,Q;AAyCN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useWordle } from '../context/Wordle'\r\nimport { Key } from './Key'\r\n\r\nconst Keyboard = () => {\r\n  const { status, onSubmit, onInput } = useWordle()\r\n\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.code === 'Enter') {\r\n        onSubmit()\r\n      } else if (e.code === 'Backspace') {\r\n        onInput()\r\n      } else {\r\n        const key = e.key.toUpperCase()\r\n        if (key.length === 1 && key >= 'A' && key <= 'Z') {\r\n          onInput(key)\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('keyup', listener)\r\n    return () => {\r\n      window.removeEventListener('keyup', listener)\r\n    }\r\n  }, [onSubmit, onInput])\r\n\r\n  const keys = [\r\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\r\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\r\n    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'DELETE']\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {keys.map((keys, i) => (\r\n        <div className=\"row justify-content-center\" key={i}>\r\n          {keys.map((key) => (\r\n            <Key key={key} value={key} status={status[key]} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Keyboard"]},"metadata":{},"sourceType":"module"}